{
	function leftop(left, rights)
	{
		for (var i=0; i<rights.length; i++)
		{
			var r = rights[i];
			var op = r[1];
			var e = r[3];
			left = {
				type: op,
				left: left,
				right: e
			}
		}
		return left;
	}
}

nl = [ \t\r]* "\n"
wsnonl = [ \t\r]*
ws = [ \t\n\r]*
sep = wsnonl ["\n:"] wsnonl

/* -------------------------------------------------------------------------- */
/*                                 EXPRESSIONS                                */
/* -------------------------------------------------------------------------- */

number
	= digits:[0-9]+
		{
			var v = digits.join("");
			return {
				type: "number",
				value: v
			};
		}

escapedchar = "\\" c:.
	{ return c }
string
	= "'" cs:([^'\\] / escapedchar)* "'"
		{
			return {
				type: "string",
				value: cs.join("")
			}
		}

id
	= id1:[A-Za-z$_] id2:[A-Za-z0-9$_]*
		{
			return {
				type: "id",
				value: id1 + id2.join("")
			}
		}

global
	= "$" global:id
		{
			return {
				type: "global",
				id: global
			}
		}

primitive = "nil" / "true" / "false"
leaf
	= wsnonl number:number
		{ return number; }
	/ "(" ws expr:expression ws ")"
		{ return expr; }
	/ s:primitive
		{
			return {
				type: s
			}
		}
	/ wsnonl global:global
		{ return global; }
	/ wsnonl string:string
		{ return string; }
	/ wsnonl id:id
		{ return id; }

expression7
	= left:leaf rights:(ws "." ws leaf)*
		{
			return leftop(left, rights);
		}
	/ leaf

expression6
	= expression7

e5unaryop = "-" / "not"
expression5
	= wsnonl op:e5unaryop ws left:expression6
		{
			return {
				type: "unary:"+op,
				left: left
			}
		}
	/ expression6

e4binop = "*" / "/" / "%"
expression4
	= left:expression5 rights:(ws e4binop ws expression5)*
		{
			return leftop(left, rights);
		}
	/ expression5

e3binop = "+" / "-"
expression3
	= left:expression4 rights:(ws e3binop ws expression4)*
		{
			return leftop(left, rights);
		}
	/ expression4

e2binop
	= "==" / "!=" / "<=" / "<" / ">=" / ">="
	/ "=" { return "==" }
	/ "<>" { return "!=" }
expression2
	= left:expression3 rights:(ws e2binop ws expression3)*
		{
			return leftop(left, rights);
		}
	/ expression3

expression1
	= left:expression2 rights:(ws "and" ws expression2)*
		{
			return leftop(left, rights);
		}
	/ expression2

expression0
	= left:expression1 rights:(ws "or" ws expression1)*
		{
			return leftop(left, rights);
		}
	/ expression1

expression
	= expression0

/* -------------------------------------------------------------------------- */
/*                                 STATEMENTS                                 */
/* -------------------------------------------------------------------------- */

statement_return
	= "return" wsnonl e:expression?
		{
			return {
				type: "return",
				value: e
			}
		}

statement_simple
	= s:("break" / "continue")
		{
			return {
				type: s
			}
		}
			
statement_singleline_if_else
	= "if" e:expression ws "then" ontrue:singlelinestatements ws
			"else" onfalse:singlelinestatements
		{
			return {
				type: "if",
				value: e,
				ontrue: ontrue,
				onfalse: onfalse
			}
		}

statement_singleline_if
	= "if" e:expression ws "then" ontrue:singlelinestatements
		{
			return {
				type: "if",
				value: e,
				ontrue: ontrue
			}
		}

statement_while
	= "while" e:expression s:statements sep "endwhile"
		{
			return {
				type: "while",
				value: e,
				block: s
			}
		}

statement
	= statement_simple
	/ statement_return
	/ statement_singleline_if_else
	/ statement_singleline_if
	/ statement_while

singlelinestatements
	= wsnonl s:statement ss:singlelinestatements
		{
			ss.value.unshift(0);
			ss.value[0] = s;
			return ss;
		}
	/ wsnonl s:statement
		{
			return {
				type: "seq",
				value: [s]
			}
		}
	/ wsnonl ":"+ ss:singlelinestatements
		{
			return ss;
		}

statements
	= ws s:statement ss:statements
		{
			ss.value.unshift(0);
			ss.value[0] = s;
			return ss;
		}
	/ ws s:statement
		{
			return {
				type: "seq",
				value: [s]
			}
		}
	/ ws ss:singlelinestatements
		{
			return ss;
		}
	/ ws
		{
			return {
				type: "seq",
				value: []
			}
		}

block
	= s:statements ws { return s; }
	
subroutine
	= ws "sub" ws id:id ws "(" ws ")" ws statements:statements ws "endsub"
		{
			return {
				type: "sub",
				id: id,
				body: statements
			}
		}

program
	= subroutine ws

